syntax = "proto2";

package object_detection.protos;

import "object_detection/protos/anchor_generator.proto";
import "object_detection/protos/box_coder.proto";
import "object_detection/protos/box_predictor.proto";
import "object_detection/protos/hyperparams.proto";
import "object_detection/protos/image_resizer.proto";
import "object_detection/protos/losses.proto";
import "object_detection/protos/matcher.proto";
import "object_detection/protos/post_processing.proto";
import "object_detection/protos/region_similarity_calculator.proto";
import "object_detection/protos/ssd.proto";
import "object_detection/protos/beliefs_predictor.proto";
import "object_detection/protos/augmentation_branch.proto";

// import "object_detection/protos/beliefs_predictor.proto";

// Configuration for Single Shot Detection (SSD) models.
// Next id: 26
message SsdAugmentationReuse {
    // Number of classes to predict.
    optional int32 num_classes = 1;

    // Image resizer for preprocessing the input image.
    optional ImageResizer image_resizer = 2;

    // Feature extractor config.
    optional SsdFeatureExtractor feature_extractor = 3;

    // Box coder to encode the boxes.
    optional BoxCoder box_coder = 4;

    // Matcher to match groundtruth with anchors.
    optional Matcher matcher = 5;

    // Region similarity calculator to compute similarity of boxes.
    optional RegionSimilarityCalculator similarity_calculator = 6;

    // Whether background targets are to be encoded as an all
    // zeros vector or a one-hot vector (where background is the 0th class).
    optional bool encode_background_as_zeros = 12 [default = false];

    // classification weight to be associated to negative
    // anchors (default: 1.0). The weight must be in [0., 1.].
    optional float negative_class_weight = 13 [default = 1.0];

    // Box predictor to attach to the features.
    optional BoxPredictor box_predictor = 7;

    // Anchor generator to compute anchors.
    optional AnchorGenerator anchor_generator = 8;

    // Post processing to apply on the predictions.
    optional PostProcessing post_processing = 9;

    // Whether to normalize the loss by number of groundtruth boxes that match to
    // the anchors.
    optional bool normalize_loss_by_num_matches = 10 [default = true];

    // Whether to normalize the localization loss by the code size of the box
    // encodings. This is applied along with other normalization factors.
    optional bool normalize_loc_loss_by_codesize = 14 [default = false];

    // Loss configuration for training.
    optional Loss loss = 11;

    // Whether to update batch norm parameters during training or not.
    // When training with a relative small batch size (e.g. 1), it is
    // desirable to disable batch norm update and use pretrained batch norm
    // params.
    //
    // Note: Some feature extractors are used with canned arg_scopes
    // (e.g resnet arg scopes).  In these cases training behavior of batch norm
    // variables may depend on both values of `batch_norm_trainable` and
    // `is_training`.
    //
    // When canned arg_scopes are used with feature extractors `conv_hyperparams`
    // will apply only to the additional layers that are added and are outside the
    // canned arg_scope.
    optional bool freeze_batchnorm = 16 [default = false];

    // Whether to update batch_norm inplace during training. This is required
    // for batch norm to work correctly on TPUs. When this is false, user must add
    // a control dependency on tf.GraphKeys.UPDATE_OPS for train/loss op in order
    // to update the batch norm moving average parameters.
    optional bool inplace_batchnorm_update = 15 [default = false];

    // Whether to add an implicit background class to one-hot encodings of
    // groundtruth labels. Set to false if training a single
    // class model or using an explicit background class.
    optional bool add_background_class = 21 [default = true];

    // Whether to use an explicit background class. Set to true if using
    // groundtruth labels with an explicit background class, as in multiclass
    // scores.
    optional bool explicit_background_class = 24 [default = false];

    optional bool use_confidences_as_targets = 22 [default = false];

    optional float implicit_example_weight = 23 [default = 1.0];

    // Configs for Augmentation Beliefs predictor

    optional BeliefsPredictor beliefs_predictor = 25;

    optional AugmentationBranch augmentation_branch = 26;

}


